name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., 1.2.3)"
        required: true
        type: string
      release-type:
        description: "Type of release"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  prepare:
    name: Prepare Release PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch
        run: |
          git checkout -b release/v${{ inputs.version }}

      - name: Update version in module.json
        run: |
          jq '.version = "${{ inputs.version }}"' module.json > module.json.tmp
          mv module.json.tmp module.json
          echo "Updated module.json to version ${{ inputs.version }}"

      - name: Update version in package.json
        run: |
          npm version ${{ inputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ inputs.version }}"

      - name: Update download URL in module.json
        run: |
          jq '.download = "https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/module.zip"' module.json > module.json.tmp
          mv module.json.tmp module.json
          echo "Updated download URL"

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ inputs.version }}"
          DATE=$(date +%Y-%m-%d)

          # Create new changelog entry
          cat > changelog_entry.md << EOF
          ## [$VERSION] - $DATE

          ### Added
          - 

          ### Changed
          - 

          ### Fixed
          - 

          EOF

          # Insert after the Unreleased section
          awk -v r="$(<changelog_entry.md)" '/## \[Unreleased\]/{print;print "";print r;next}1' CHANGELOG.md > CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md
          rm changelog_entry.md

          echo "Updated CHANGELOG.md with version $VERSION"

      - name: Run linter and auto-fix
        run: npm run lint:fix
        continue-on-error: true

      - name: Commit changes
        run: |
          git add module.json package.json package-lock.json CHANGELOG.md
          git commit -m "chore: prepare release v${{ inputs.version }}"
          git push origin release/v${{ inputs.version }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/v${{ inputs.version }}
          base: main
          title: "Release v${{ inputs.version }}"
          body: |
            ## Release v${{ inputs.version }}

            This PR prepares the module for release version ${{ inputs.version }}.

            ### Changes Made
            - ✅ Updated version in `module.json` to ${{ inputs.version }}
            - ✅ Updated version in `package.json` to ${{ inputs.version }}
            - ✅ Updated download URL in `module.json`
            - ✅ Added new section to `CHANGELOG.md`
            - ✅ Ran linter to ensure code quality

            ### Before Merging
            1. Review and update the CHANGELOG.md with actual changes for this release
            2. Ensure all tests pass
            3. Verify the version numbers are correct

            ### After Merging
            The release workflow will automatically:
            - Create a GitHub release with tag v${{ inputs.version }}
            - Build and upload the module.zip
            - Publish to Foundry VTT package system

            ---

            **Release Type:** ${{ inputs.release-type }}
          labels: release
          draft: false
